// Generated by gencpp from file sena_msgs/ShootRequest.msg
// DO NOT EDIT!


#ifndef SENA_MSGS_MESSAGE_SHOOTREQUEST_H
#define SENA_MSGS_MESSAGE_SHOOTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sena_msgs
{
template <class ContainerAllocator>
struct ShootRequest_
{
  typedef ShootRequest_<ContainerAllocator> Type;

  ShootRequest_()
    : strength(0.0)
    , ShootPos(0)  {
    }
  ShootRequest_(const ContainerAllocator& _alloc)
    : strength(0.0)
    , ShootPos(0)  {
  (void)_alloc;
    }



   typedef float _strength_type;
  _strength_type strength;

   typedef int64_t _ShootPos_type;
  _ShootPos_type ShootPos;





  typedef boost::shared_ptr< ::sena_msgs::ShootRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sena_msgs::ShootRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ShootRequest_

typedef ::sena_msgs::ShootRequest_<std::allocator<void> > ShootRequest;

typedef boost::shared_ptr< ::sena_msgs::ShootRequest > ShootRequestPtr;
typedef boost::shared_ptr< ::sena_msgs::ShootRequest const> ShootRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sena_msgs::ShootRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sena_msgs::ShootRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sena_msgs::ShootRequest_<ContainerAllocator1> & lhs, const ::sena_msgs::ShootRequest_<ContainerAllocator2> & rhs)
{
  return lhs.strength == rhs.strength &&
    lhs.ShootPos == rhs.ShootPos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sena_msgs::ShootRequest_<ContainerAllocator1> & lhs, const ::sena_msgs::ShootRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sena_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sena_msgs::ShootRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sena_msgs::ShootRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sena_msgs::ShootRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sena_msgs::ShootRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sena_msgs::ShootRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sena_msgs::ShootRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sena_msgs::ShootRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3198871bad21e7a959f16b2e8430d374";
  }

  static const char* value(const ::sena_msgs::ShootRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3198871bad21e7a9ULL;
  static const uint64_t static_value2 = 0x59f16b2e8430d374ULL;
};

template<class ContainerAllocator>
struct DataType< ::sena_msgs::ShootRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sena_msgs/ShootRequest";
  }

  static const char* value(const ::sena_msgs::ShootRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sena_msgs::ShootRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 strength\n"
"int64   ShootPos\n"
;
  }

  static const char* value(const ::sena_msgs::ShootRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sena_msgs::ShootRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.strength);
      stream.next(m.ShootPos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ShootRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sena_msgs::ShootRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sena_msgs::ShootRequest_<ContainerAllocator>& v)
  {
    s << indent << "strength: ";
    Printer<float>::stream(s, indent + "  ", v.strength);
    s << indent << "ShootPos: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ShootPos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENA_MSGS_MESSAGE_SHOOTREQUEST_H
